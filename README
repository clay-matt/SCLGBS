#############################
 
Stable Commutator Length in BS(m,l)

Description: Sage/Python scripts to compute lower bound on the stable
commutator length in the Baumslag-Solitar group BS(m,l):

BS(m,l) = < a,t | t a^m T = a^l >

#############################

Two ways to compute scl(g):

** Command-line **

In the directory containing the files enter:

sage bsscl.py [-h] [-v[v]] g m l

positional arguments:
	g is a string in a,A,t,T representing the element
	m integer
	l integer

optional arguments:
	 -h, --help       show this help message and exit
 	 -v, --verbose    increase output verbosity

Verboisty Levels:
-v: shows current process, where files are saved and linear program
solution
-vv: additionally opens turn graph file and shows variables and linear
program if number of variables is less than 100

Example:

sage bsscl.py ataT 2 5 -v

The output of this command is:

********

m,l = 2,5
g = ataT
Turn Degrees: [1, 1]
Turn Types: [2, 1]
Plotting turn graph...
Turn graph saved to /Users/mclay/Programs/Sage/SCLGBS/ataT_2_5.png
Setting up the linear programming problem...
There are 3 variables.
Variables saved to /Users/mclay/Programs/Sage/SCLGBS/x_ataT_2_5.sobj
Linear program saved to /Users/mclay/Programs/Sage/SCLGBS/ataT_2_5.sobj
Linear Programming Solution = 0.7
0.2 : {(0, 0): 5}
0.5 : {(1, 1): 2}
lower scl(ataT) = 0.15

********

Note: the output gets very big very quickly, consider redirecting output to a file.

** In a Sage session **

Enter Sage and load the file scl.py via: 

%attach 'scl.py'

To compute lower bound on scl(g) enter:

scl(g,m,l,v)

where:
      g is a string in a,A,t,T representing the element	
      m integer
      l integer
      v verbosity, (default value is 0) 

Examples:

sage: scl('ataT',2,5,1)
The output is the same as above.

sage: scl('ataT',2,5)
0.15000000000000002

#############################

Report bugs, issues and problems to:
mattclay@uark.edu
